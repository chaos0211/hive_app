<template>
  <div class="p-4 md:p-6 space-y-4">
    <!-- 顶部：标题 & 操作 -->
    <div class="flex items-center justify-between">
      <h2 class="text-xl font-semibold">应用对比（分析工作台）</h2>
      <div class="flex items-center gap-2">
        <button class="px-3 py-2 text-sm rounded-lg border bg-white hover:bg-light-100" @click="exportCSV">导出 CSV</button>
        <button class="px-3 py-2 text-sm rounded-lg border bg-white hover:bg-light-100" @click="saveView">保存视图</button>
      </div>
    </div>

    <div class="grid grid-cols-12 gap-4">
      <!-- 左侧：筛选&应用选择 -->
      <aside class="col-span-12 lg:col-span-3 bg-white rounded-xl border p-3 space-y-3">
        <h3 class="text-sm font-medium">筛选条件</h3>
        <div class="grid grid-cols-2 gap-2">
          <label class="col-span-1 text-xs text-info">国家
            <select v-model="q.country" class="mt-1 w-full px-2 py-1 rounded-lg border">
              <option value="">全部</option>
              <option v-for="c in countries" :key="c" :value="c">{{ c }}</option>
            </select>
          </label>
          <label class="col-span-1 text-xs text-info">设备
            <select v-model="q.device" class="mt-1 w-full px-2 py-1 rounded-lg border">
              <option value="">全部</option>
              <option v-for="d in devices" :key="d" :value="d">{{ d }}</option>
            </select>
          </label>
          <label class="col-span-2 text-xs text-info">榜单类型（brand_id）
            <select v-model.number="q.brand_id" class="mt-1 w-full px-2 py-1 rounded-lg border">
              <option :value="''">全部</option>
              <option :value="0">付费</option>
              <option :value="1">免费</option>
              <option :value="2">畅销</option>
            </select>
          </label>
          <label class="col-span-2 text-xs text-info">日期范围
            <div class="mt-1 flex items-center gap-1">
              <input type="date" v-model="q.date_from" class="w-full px-2 py-1 rounded-lg border"/>
              <span class="text-info">—</span>
              <input type="date" v-model="q.date_to" class="w-full px-2 py-1 rounded-lg border"/>
            </div>
          </label>
          <label class="col-span-2 text-xs text-info">是否广告
            <select v-model="q.is_ad" class="mt-1 w-full px-2 py-1 rounded-lg border">
              <option :value="''">全部</option>
              <option :value="1">有</option>
              <option :value="0">无</option>
            </select>
          </label>
        </div>

        <div class="pt-2 border-t">
          <div class="flex items-center justify-between">
            <h3 class="text-sm font-medium">应用选择（最多5个）</h3>
            <button class="text-xs text-primary hover:underline" @click="clearApps">清空</button>
          </div>
          <div class="mt-2 flex gap-2">
            <input v-model.trim="appQuery" @keyup.enter="searchApps" class="flex-1 px-2 py-1 rounded-lg border" placeholder="搜索应用名 / app_id" />
            <button class="px-3 py-1 text-sm rounded-lg border bg-white hover:bg-light-100" @click="searchApps">搜索</button>
          </div>
          <div v-if="searching" class="text-xs text-info mt-2">搜索中…</div>
          <ul v-else class="mt-2 max-h-32 overflow-auto text-sm">
            <li v-for="a in appOptions" :key="a.app_id" class="flex items-center justify-between px-2 py-1 hover:bg-light-100 rounded">
              <div class="flex items-center gap-2">
                <img v-if="a.icon_url" :src="a.icon_url" class="w-5 h-5 rounded"/>
                <div>
                  <div class="font-medium">{{ a.app_name }}</div>
                  <div class="text-xs text-info mono">{{ a.app_id }}</div>
                </div>
              </div>
              <button class="text-xs px-2 py-1 rounded border hover:bg-light-100" :disabled="selectedApps.length>=5" @click="addApp(a)">添加</button>
            </li>
          </ul>

          <div class="mt-3">
            <h4 class="text-xs text-info mb-1">已选应用（可设为基准）</h4>
            <div v-if="selectedApps.length===0" class="text-xs text-info">尚未选择应用</div>
            <ul v-else class="space-y-1">
              <li v-for="a in selectedApps" :key="a.app_id" class="flex items-center justify-between px-2 py-1 bg-light-100 rounded">
                <div class="flex items-center gap-2">
                  <img v-if="a.icon_url" :src="a.icon_url" class="w-5 h-5 rounded"/>
                  <span class="font-medium">{{ a.app_name }}</span>
                  <span class="text-xs text-info mono">{{ a.app_id }}</span>
                </div>
                <div class="flex items-center gap-2">
                  <button class="text-xs px-2 py-1 rounded border hover:bg-white" :class="{ 'bg-primary/10 text-primary border-primary': baselineId===a.app_id }" @click="baselineId=a.app_id">设为基准</button>
                  <button class="text-xs text-danger hover:underline" @click="removeApp(a.app_id)">移除</button>
                </div>
              </li>
            </ul>
          </div>
        </div>

        <div class="pt-2 border-t flex gap-2">
          <button class="flex-1 px-3 py-2 text-sm rounded-lg border bg-white hover:bg-light-100" @click="reload">应用筛选</button>
          <button class="flex-1 px-3 py-2 text-sm rounded-lg border bg-white hover:bg-light-100" @click="reset">重置</button>
        </div>
      </aside>

      <!-- 右侧：指标工作台 -->
      <section class="col-span-12 lg:col-span-9 space-y-4">
        <!-- 指标卡片 -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
          <div v-for="k in kpis" :key="k.key" class="bg-white border rounded-xl p-3">
            <div class="text-xs text-info">{{ k.title }}</div>
            <div class="mt-1 text-lg font-semibold">{{ k.value }}</div>
            <div v-if="k.delta!==undefined" class="text-xs" :class="k.delta>=0 ? 'text-danger' : 'text-success'">
              {{ k.delta>=0 ? '+'+k.delta : k.delta }} vs 基准
            </div>
          </div>
        </div>

        <!-- 趋势图占位（后续接入图表库） -->
        <div class="bg-white border rounded-xl p-3">
          <div class="flex items-center justify-between mb-2">
            <h3 class="text-sm font-medium">排名趋势（占位）</h3>
            <div class="text-xs text-info">后续接入 ECharts/Chart.js</div>
          </div>
          <div class="h-48 grid place-items-center text-info">趋势图占位</div>
        </div>

        <!-- 覆盖率/分布占位 -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
          <div class="bg-white border rounded-xl p-3">
            <div class="flex items-center justify-between mb-2">
              <h3 class="text-sm font-medium">TopN 覆盖率（占位）</h3>
              <div class="text-xs text-info">后续计算 & 可视化</div>
            </div>
            <div class="h-40 grid place-items-center text-info">覆盖率图占位</div>
          </div>
          <div class="bg-white border rounded-xl p-3">
            <div class="flex items-center justify-between mb-2">
              <h3 class="text-sm font-medium">价格/体积分布（占位）</h3>
              <div class="text-xs text-info">后续可换散点/箱线</div>
            </div>
            <div class="h-40 grid place-items-center text-info">分布图占位</div>
          </div>
        </div>

        <!-- 对比明细表 -->
        <div class="bg-white border rounded-xl p-3 overflow-auto">
          <div class="flex items-center justify-between mb-2">
            <h3 class="text-sm font-medium">对比明细</h3>
            <div class="text-xs text-info">可横向滚动</div>
          </div>
          <table class="min-w-full text-sm border-collapse">
            <thead>
              <tr>
                <th class="px-2 py-1 text-left">指标</th>
                <th v-for="a in selectedApps" :key="'th-'+a.app_id" class="px-2 py-1 text-left">{{ a.app_name }}</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="row in diffRows" :key="row.key" class="border-t">
                <td class="px-2 py-1 text-info">{{ row.title }}</td>
                <td v-for="a in selectedApps" :key="row.key + '-' + a.app_id" class="px-2 py-1" :class="bestClass(row.key, a.app_id)">
                  {{ fmt(row.values[a.app_id]) }}
                  <span v-if="baselineId && a.app_id!==baselineId && row.diff[a.app_id]!==undefined" class="ml-1 text-xs text-info">(Δ {{ fmt(row.diff[a.app_id]) }})</span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </section>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed, reactive, ref, watch } from 'vue'
import service from '@/api/http'

// ==== 查询条件 & 应用选择状态 ====
const q = reactive({
  country: '',
  device: '',
  brand_id: '' as number | '' ,
  date_from: '',
  date_to: '',
  is_ad: '' as '' | 0 | 1,
})

const appQuery = ref('')
const searching = ref(false)
const appOptions = ref<Array<any>>([])
const selectedApps = ref<Array<any>>([])
const baselineId = ref<string>('')

const countries = ref<string[]>([])
const devices = ref<string[]>([])

async function searchApps() {
  if (!appQuery.value.trim()) { appOptions.value = []; return }
  searching.value = true
  try {
    const { data } = await service.get("/api/v1/apps/search", {
      params: { q: appQuery.value.trim(), limit: 20 }
    })
    appOptions.value = Array.isArray(data?.items) ? data.items : []
  } finally {
    searching.value = false
  }
}
function addApp(a: any) {
  if (selectedApps.value.find(x => x.app_id === a.app_id)) return
  if (selectedApps.value.length >= 5) return
  selectedApps.value.push(a)
  if (!baselineId.value) baselineId.value = a.app_id
}
function removeApp(id: string) {
  selectedApps.value = selectedApps.value.filter(x => x.app_id !== id)
  if (baselineId.value === id) baselineId.value = selectedApps.value[0]?.app_id || ''
}
function clearApps() { selectedApps.value = []; baselineId.value = '' }

function reload() {
  // TODO: 根据 q + selectedApps 调用 /api/v1/compare 与 timeseries
  // 目前生成 mock 数据
  buildMockData()
}
function reset() {
  q.country = ''; q.device = ''; q.brand_id = ''; q.date_from = ''; q.date_to = ''; q.is_ad = ''
  appQuery.value = ''
  clearApps()
  appOptions.value = []
  buildMockData()
}

// ==== KPI & 表格数据（先用 mock，后续替换为接口数据） ====
const kpis = ref<Array<any>>([])
const diffRows = ref<Array<any>>([])

function buildMockData() {
  // 基于 selectedApps 构建示例 KPI & 对比数据
  const base = selectedApps.value.find(a => a.app_id === baselineId.value)
  const apps = selectedApps.value
  const rows = [
    { key: 'ranking', title: '当前排名', values: {}, diff: {} },
    { key: 'best', title: '最佳排名', values: {}, diff: {} },
    { key: 'avg_rank', title: '平均排名', values: {}, diff: {} },
    { key: 'price', title: '价格(¥)', values: {}, diff: {} },
    { key: 'size', title: '体积(MB)', values: {}, diff: {} },
    { key: 'top10_days', title: 'Top10 覆盖天数', values: {}, diff: {} },
  ] as any
  apps.forEach((a, i) => {
    const r = 1 + Math.floor(Math.random()*50)
    const b = 1 + Math.floor(Math.random()*10)
    const avg = Math.round((r + b + 10)/3)
    const p = Number((Math.random()*30).toFixed(2))
    const s = Math.round(50 + Math.random()*300)
    const t10 = Math.round(Math.random()*30)

    rows[0].values[a.app_id] = r
    rows[1].values[a.app_id] = b
    rows[2].values[a.app_id] = avg
    rows[3].values[a.app_id] = p
    rows[4].values[a.app_id] = s
    rows[5].values[a.app_id] = t10
  })
  if (base) {
    rows.forEach(row => {
      apps.forEach(a => {
        row.diff[a.app_id] = (row.values[a.app_id] ?? 0) - (row.values[base.app_id] ?? 0)
      })
    })
  }
  diffRows.value = rows

  // KPI：以基准为主
  const baseRank = base ? rows[0].values[base.app_id] : 0
  kpis.value = [
    { key: 'rank_now', title: '基准当前排名', value: baseRank || '-' },
    { key: 'best', title: '基准最佳排名', value: base ? rows[1].values[base.app_id] : '-' },
    { key: 'avg', title: '基准平均排名', value: base ? rows[2].values[base.app_id] : '-' },
    { key: 'top10', title: '基准 Top10 天数', value: base ? rows[5].values[base.app_id] : '-' },
  ]
}

function bestClass(metricKey: string, appId: string) {
  const row = diffRows.value.find(r => r.key === metricKey)
  if (!row) return ''
  // 对于排名类（ranking/avg/best）：值越小越好；其他值越大越好
  const smallerBetter = ['ranking', 'avg_rank', 'best']
  const vals = Object.values(row.values) as number[]
  const target = row.values[appId]
  if (target === undefined) return ''
  const optimal = smallerBetter.includes(metricKey) ? Math.min(...vals) : Math.max(...vals)
  return target === optimal ? 'bg-primary/5 font-medium' : ''
}

function fmt(v: any) { return v === null || v === undefined ? '-' : (typeof v === 'number' ? String(v) : v) }
function exportCSV() {
  // TODO: 导出 diffRows + selectedApps 为 CSV
  alert('导出 CSV（占位）')
}
function saveView() {
  // TODO: 保存筛选+选择为视图
  alert('保存视图（占位）')
}

// 初始：塞一些演示 app
selectedApps.value = [
  { app_id: 'com.demo.a', app_name: 'Demo A', icon_url: '' },
  { app_id: 'com.demo.b', app_name: 'Demo B', icon_url: '' },
]
baselineId.value = 'com.demo.a'
buildMockData()
loadDimOptions()

watch(selectedApps, buildMockData, { deep: true })

async function loadDimOptions() {
  try {
    // 期望后端提供：GET /api/v1/meta/options?fields=country,device
    const { data } = await service.get('/api/v1/meta/options', { params: { fields: 'country,device' } })
    countries.value = Array.isArray(data?.country) ? data.country : []
    devices.value = Array.isArray(data?.device) ? data.device : []
  } catch (e) {
    // 后端暂未实现时的兜底选项（可根据你数据库实际值调整）
    countries.value = countries.value.length ? countries.value : ['cn', 'us', 'jp', 'kr']
    devices.value = devices.value.length ? devices.value : ['iphone', 'ipad', 'android']
  }
}

// ---- mock helpers ----
function mockAppOptions(q: string) {
  const pool = [
    { app_id: 'com.demo.a', app_name: 'Demo A', icon_url: '' },
    { app_id: 'com.demo.b', app_name: 'Demo B', icon_url: '' },
    { app_id: 'com.demo.c', app_name: 'Demo C', icon_url: '' },
    { app_id: 'com.demo.d', app_name: 'Demo D', icon_url: '' },
    { app_id: 'com.demo.e', app_name: 'Demo E', icon_url: '' },
  ]
  return pool.filter(x => !q || x.app_name.toLowerCase().includes(q.toLowerCase()) || x.app_id.includes(q))
}
</script>

<style scoped>
.mono { font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }
</style>
